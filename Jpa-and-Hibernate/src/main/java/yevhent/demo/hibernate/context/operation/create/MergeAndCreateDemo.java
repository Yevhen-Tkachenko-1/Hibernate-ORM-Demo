package yevhent.demo.hibernate.context.operation.create;

import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import yevhent.demo.hibernate.configuration.ArtSchoolFactory;
import yevhent.demo.hibernate.entity.ArtStudent;

public class MergeAndCreateDemo {
    public static void main(String[] args) {

        try (EntityManagerFactory entityManagerFactory = ArtSchoolFactory.createEntityManagerFactory();
             EntityManager entityManager = entityManagerFactory.createEntityManager()) {
            entityManager.getTransaction().begin();
            // ID should be 0 for Entity creation.
            // Providing non-zero existing ID will cause SELECT and UPDATE queries
            // Providing non-zero non-existing ID will lead to OptimisticLockException
            // Based on our Entity GenerationType = IDENTITY, Hibernate knows ID generation strategy, so creates insert statement with no ID.
            // Finally, ID is generated by PostgreSQL starting from 1.
            ArtStudent artStudent = new ArtStudent(0, "Merged John");
            entityManager.merge(artStudent);
            // Hibernate prepares statement:
            // "Hibernate: insert into art_school.art_students (student_name) values (?) returning student_id"
            // But changes remains in Hibernate context (in Java app)
            entityManager.getTransaction().commit(); // actual insert to DB
        }
    }
}