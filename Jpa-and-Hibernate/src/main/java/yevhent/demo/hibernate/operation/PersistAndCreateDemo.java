package yevhent.demo.hibernate.operation;

import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import yevhent.demo.hibernate.configuration.ArtSchoolFactory;
import yevhent.demo.hibernate.entity.ArtStudent;

public class PersistAndCreateDemo {
    public static void main(String[] args) {

        try (EntityManagerFactory entityManagerFactory = ArtSchoolFactory.createEntityManagerFactory();
             EntityManager entityManager = entityManagerFactory.createEntityManager()) { // session is opened once EntityManager is provided
            entityManager.getTransaction().begin(); // begin Transaction in order to follow ACID within this method
            // ID should be 0 for Entity creation.
            // Providing non-zero existing (or non-existing) ID will lead to EntityExistsException
            // Based on our Entity GenerationType = IDENTITY, Hibernate knows ID generation strategy, so creates insert statement with no ID.
            // Finally, ID is generated by PostgreSQL starting from 1.
            ArtStudent artStudent = new ArtStudent(0, "Persisted John");
            entityManager.persist(artStudent);
            // Hibernate prepares statement:
            // "Hibernate: insert into art_school.art_students (student_name) values (?) returning student_id"
            // But changes remains in Hibernate context (in Java app)
            entityManager.getTransaction().commit(); // actual insert to DB
        } // session is closed here by entityManager.close()
        // In case transaction is not committed, calling entityManager.close() also discards any staged changes in persistent context.
    }
}